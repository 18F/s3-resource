// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/concourse/s3-resource"
)

type FakeS3Client struct {
	BucketFilesStub        func(bucketName string) ([]string, error)
	bucketFilesMutex       sync.RWMutex
	bucketFilesArgsForCall []struct {
		bucketName string
	}
	bucketFilesReturns struct {
		result1 []string
		result2 error
	}
	UploadFileStub        func(bucketName string, remotePath string, localPath string) error
	uploadFileMutex       sync.RWMutex
	uploadFileArgsForCall []struct {
		bucketName string
		remotePath string
		localPath  string
	}
	uploadFileReturns struct {
		result1 error
	}
	DownloadFileStub        func(bucketName string, remotePath string, localPath string) error
	downloadFileMutex       sync.RWMutex
	downloadFileArgsForCall []struct {
		bucketName string
		remotePath string
		localPath  string
	}
	downloadFileReturns struct {
		result1 error
	}
	URLStub        func(bucketName string, remotePath string, private bool) string
	uRLMutex       sync.RWMutex
	uRLArgsForCall []struct {
		bucketName string
		remotePath string
		private    bool
	}
	uRLReturns struct {
		result1 string
	}
}

func (fake *FakeS3Client) BucketFiles(bucketName string) ([]string, error) {
	fake.bucketFilesMutex.Lock()
	fake.bucketFilesArgsForCall = append(fake.bucketFilesArgsForCall, struct {
		bucketName string
	}{bucketName})
	fake.bucketFilesMutex.Unlock()
	if fake.BucketFilesStub != nil {
		return fake.BucketFilesStub(bucketName)
	} else {
		return fake.bucketFilesReturns.result1, fake.bucketFilesReturns.result2
	}
}

func (fake *FakeS3Client) BucketFilesCallCount() int {
	fake.bucketFilesMutex.RLock()
	defer fake.bucketFilesMutex.RUnlock()
	return len(fake.bucketFilesArgsForCall)
}

func (fake *FakeS3Client) BucketFilesArgsForCall(i int) string {
	fake.bucketFilesMutex.RLock()
	defer fake.bucketFilesMutex.RUnlock()
	return fake.bucketFilesArgsForCall[i].bucketName
}

func (fake *FakeS3Client) BucketFilesReturns(result1 []string, result2 error) {
	fake.BucketFilesStub = nil
	fake.bucketFilesReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Client) UploadFile(bucketName string, remotePath string, localPath string) error {
	fake.uploadFileMutex.Lock()
	fake.uploadFileArgsForCall = append(fake.uploadFileArgsForCall, struct {
		bucketName string
		remotePath string
		localPath  string
	}{bucketName, remotePath, localPath})
	fake.uploadFileMutex.Unlock()
	if fake.UploadFileStub != nil {
		return fake.UploadFileStub(bucketName, remotePath, localPath)
	} else {
		return fake.uploadFileReturns.result1
	}
}

func (fake *FakeS3Client) UploadFileCallCount() int {
	fake.uploadFileMutex.RLock()
	defer fake.uploadFileMutex.RUnlock()
	return len(fake.uploadFileArgsForCall)
}

func (fake *FakeS3Client) UploadFileArgsForCall(i int) (string, string, string) {
	fake.uploadFileMutex.RLock()
	defer fake.uploadFileMutex.RUnlock()
	return fake.uploadFileArgsForCall[i].bucketName, fake.uploadFileArgsForCall[i].remotePath, fake.uploadFileArgsForCall[i].localPath
}

func (fake *FakeS3Client) UploadFileReturns(result1 error) {
	fake.UploadFileStub = nil
	fake.uploadFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeS3Client) DownloadFile(bucketName string, remotePath string, localPath string) error {
	fake.downloadFileMutex.Lock()
	fake.downloadFileArgsForCall = append(fake.downloadFileArgsForCall, struct {
		bucketName string
		remotePath string
		localPath  string
	}{bucketName, remotePath, localPath})
	fake.downloadFileMutex.Unlock()
	if fake.DownloadFileStub != nil {
		return fake.DownloadFileStub(bucketName, remotePath, localPath)
	} else {
		return fake.downloadFileReturns.result1
	}
}

func (fake *FakeS3Client) DownloadFileCallCount() int {
	fake.downloadFileMutex.RLock()
	defer fake.downloadFileMutex.RUnlock()
	return len(fake.downloadFileArgsForCall)
}

func (fake *FakeS3Client) DownloadFileArgsForCall(i int) (string, string, string) {
	fake.downloadFileMutex.RLock()
	defer fake.downloadFileMutex.RUnlock()
	return fake.downloadFileArgsForCall[i].bucketName, fake.downloadFileArgsForCall[i].remotePath, fake.downloadFileArgsForCall[i].localPath
}

func (fake *FakeS3Client) DownloadFileReturns(result1 error) {
	fake.DownloadFileStub = nil
	fake.downloadFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeS3Client) URL(bucketName string, remotePath string, private bool) string {
	fake.uRLMutex.Lock()
	fake.uRLArgsForCall = append(fake.uRLArgsForCall, struct {
		bucketName string
		remotePath string
		private    bool
	}{bucketName, remotePath, private})
	fake.uRLMutex.Unlock()
	if fake.URLStub != nil {
		return fake.URLStub(bucketName, remotePath, private)
	} else {
		return fake.uRLReturns.result1
	}
}

func (fake *FakeS3Client) URLCallCount() int {
	fake.uRLMutex.RLock()
	defer fake.uRLMutex.RUnlock()
	return len(fake.uRLArgsForCall)
}

func (fake *FakeS3Client) URLArgsForCall(i int) (string, string, bool) {
	fake.uRLMutex.RLock()
	defer fake.uRLMutex.RUnlock()
	return fake.uRLArgsForCall[i].bucketName, fake.uRLArgsForCall[i].remotePath, fake.uRLArgsForCall[i].private
}

func (fake *FakeS3Client) URLReturns(result1 string) {
	fake.URLStub = nil
	fake.uRLReturns = struct {
		result1 string
	}{result1}
}

var _ s3resource.S3Client = new(FakeS3Client)
